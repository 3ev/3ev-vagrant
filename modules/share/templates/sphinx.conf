#!/bin/bash

cat <<-EOL
        indexer
        {
            mem_limit = 32M
        }

        searchd
        {
               # searchd TCP port number
                # mandatory, default is 3312
                port                            = 3312

                # log file, searchd run info is logged here
                # optional, default is 'searchd.log'
                log                                     = /var/log/sphinxsearch/searchd.log


                # query log file, all search queries are logged here
                # optional, default is empty (do not log queries)
                query_log                       = /var/log/sphinxsearch/query.log


                # client read timeout, seconds
                # optional, default is 5
                read_timeout            = 5

                # maximum amount of children to fork (concurrent searches to run)
                # optional, default is 0 (unlimited)
                max_children            = 30

                # PID file, searchd process ID file name
                # mandatory
                pid_file                        = /var/log/sphinxsearch/searchd.pid


                # max amount of matches the daemon ever keeps in RAM, per-index
                # WARNING, THERE'S ALSO PER-QUERY LIMIT, SEE SetLimits() API CALL
                # default is 1000 (just like Google)
                max_matches                     = 100000

                # seamless rotate, prevents rotate stalls if precaching huge datasets
                # optional, default is 1
                seamless_rotate         = 1

                # whether to forcibly preopen all indexes on startup
                # optional, default is 0 (do not preopen)
                preopen_indexes         = 0

                # whether to unlink .old index copies on succesful rotation.
                # optional, default is 1 (do unlink)
                unlink_old                      = 1
                workers = threads
        }
EOL

find . -name '*.include' -exec bash {} \;